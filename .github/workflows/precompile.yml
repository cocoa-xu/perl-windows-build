name: perl-windows

on:
  workflow_dispatch:
    inputs:
      perl5_verison:
        description: 'Perl5 Version'
        required: true
      build_aarch64:
        description: 'Build aarch64'
        required: false
        default: 'true'
        type: choice
        options:
          - true
          - false
      build_x86_64:
        description: 'Build x86_64'
        required: false
        default: 'true'
        type: choice
        options:
          - true
          - false
  push:
    tags:
        - 'v*'

concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}-${{ inputs.perl5_verison }}
  cancel-in-progress: true

permissions:
  contents: write

jobs:
  windows:
    runs-on: ${{ matrix.job.runs-on }}
    strategy:
      fail-fast: false
      matrix:
        job:
          - { target: aarch64-windows-msvc, runs-on: self-hosted-aarch64-windows-msvc, arch: aarch64, vcvarsall: arm64 }
          - { target: x86_64-windows-msvc, runs-on: windows-2019, arch: x86_64, vcvarsall: x64 }

    steps:
      - name: Build Check
        id: build-check
        run: |
          if ("${{ github.event_name }}" -eq "push") {
            echo "build=true" >> $env:GITHUB_OUTPUT
            $BUILD_VERSION_V = "v$($env:GITHUB_REF -replace '.*v', '')"
          } else {
            if ("${{ matrix.job.target }}" -eq "aarch64-windows-msvc") {
              echo "build=${{ inputs.build_aarch64 }}" >> $env:GITHUB_OUTPUT
            }

            if ("${{ matrix.job.target }}" -eq "x86_64-windows-msvc") {
              echo "build=${{ inputs.build_x86_64 }}" >> $env:GITHUB_OUTPUT
            }

            $BUILD_VERSION_V = "${{ inputs.perl5_verison }}"
          }

          $BUILD_VERSION = $BUILD_VERSION_V -replace '^v', ''
          echo "version=$BUILD_VERSION" >> $env:GITHUB_OUTPUT

      - name: Setup MSVC
        if: steps.build-check.outputs.build == 'true'
        uses: ilammy/msvc-dev-cmd@v1
        with:
          arch: ${{ matrix.job.vcvarsall }}

      - name: Compile Perl
        if: steps.build-check.outputs.build == 'true'
        run: |
          $PERL5_VERSION="${{ steps.build-check.outputs.version }}"
          Invoke-WebRequest -Uri https://www.cpan.org/src/5.0/perl-${PERL5_VERSION}.tar.gz -OutFile perl-${PERL5_VERSION}.tar.gz
          tar -xzf .\perl-${PERL5_VERSION}.tar.gz
          cd perl-${PERL5_VERSION}\win32
          (Get-Content .\Makefile).Replace("#CCTYPE`t`t= MSVC143", "CCTYPE`t`t= MSVC143") |  Set-Content .\Makefile
          nmake
          nmake install

      - name: Create tarball
        if: steps.build-check.outputs.build == 'true'
        run: |
          New-Item -ItemType Directory -Path artifacts -Force
          tar -czf ".\artifacts\perl-${{ matrix.job.arch }}-windows-msvc.tar.gz" -C c:\perl .
          $SHA256="$((Get-FileHash -Path ".\artifacts\perl-${{ matrix.job.arch }}-windows-msvc.tar.gz" -Algorithm SHA256).Hash)  perl-${{ matrix.job.arch }}-windows-msvc.tar.gz"
          $SHA256 | Out-File -FilePath ".\artifacts\perl-${{ matrix.job.arch }}-windows-msvc.tar.gz.sha256" -Encoding ascii

      - uses: softprops/action-gh-release@v1
        if: steps.build-check.outputs.build == 'true'
        with:
          tag_name: v${{ steps.build-check.outputs.version }}
          name: v${{ steps.build-check.outputs.version }}
          files: |
            artifacts/perl-*.tar.gz
            artifacts/perl-*.tar.gz.sha256
